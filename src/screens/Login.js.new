import React, { useState, useContext, useEffect, useCallback } from 'react';
import {
  StatusBar,
  Dimensions,
  View,
  TouchableOpacity,
  Alert,
  Platform,
} from 'react-native';
import { Button, TextInput, Snackbar, Card } from 'react-native-paper';
import { Image, StyleSheet } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Contexts
import { CredentialsContext } from '../context/CredentialsContext';
import { ThemeContext } from '../context/ThemeContext';

// Components
import KeyBoardAvoidingWrapper from '../components/KeyBoardAvoidingWrapper';
import StandardText from '../components/StandardText/StandardText';

// Services and utilities
import { handleUserLogin } from '../services/NetworkUtils';
import helpers from '../navigation/helpers';

const { StorageHelper } = helpers;

import { STORAGE_KEYS } from '../navigation/constants';

// Theme
import colors from '../theme/color';

const Login = () => {
  // State management
  const [hidePassword, setHidePassword] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [rememberMe, setRememberMe] = useState(false);

  // Contexts
  const { setCredentials } = useContext(CredentialsContext);
  const { theme: mode } = useContext(ThemeContext);

  // Theme variables
  const isDark = mode === 'dark';
  const backgroundColor = isDark ? colors.backgroundDark : colors.backgroundLight;
  const cardBackground = isDark ? colors.light_black : colors.white;
  const textPrimary = isDark ? colors.white : colors.textPrimary;
  const textSecondary = isDark ? colors.light_gray : colors.textSecondary;
  const onPrimary = colors.white;
  const primary = colors.primary;

  // Load saved credentials on mount
  useEffect(() => {
    const loadSavedCredentials = async () => {
      try {
        const savedEmail = await AsyncStorage.getItem('savedEmail');
        const savedRememberMe = await AsyncStorage.getItem('rememberMe');

        if (savedEmail && savedRememberMe === 'true') {
          setEmail(savedEmail);
          setRememberMe(true);
        }
      } catch (error) {
        console.error('Error loading saved credentials:', error);
      }
    };

    loadSavedCredentials();
  }, []);

  // Form validation
  const validateEmail = useCallback((input) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(input);
  }, []);

  const validateForm = useCallback(() => {
    if (!email || !password) {
      setErrorMessage('Please enter both email and password.');
      return false;
    }

    if (!validateEmail(email)) {
      setErrorMessage('Please enter a valid email address.');
      return false;
    }

    if (password.length < 6) {
      setErrorMessage('Password must be at least 6 characters long.');
      return false;
    }

    return true;
  }, [email, password, validateEmail]);

  // Handle login
  const handleLogin = useCallback(async () => {
    if (!validateForm()) return;

    setLoading(true);
    setErrorMessage('');

    try {
      const response = await handleUserLogin({ email, password });

      if (!response.success) {
        throw new Error(response.error || 'Login failed');
      }

      const { user, accessToken, refreshToken } = response.data || {};

      if (!user || !accessToken) {
        throw new Error('Invalid login response: missing user data or token');
      }

      await StorageHelper.storeUserData(user, accessToken, refreshToken);

      if (refreshToken) {
        await AsyncStorage.setItem(STORAGE_KEYS.REFRESH_TOKEN, refreshToken);
      }

      if (rememberMe) {
        await AsyncStorage.multiSet([
          ['savedEmail', email],
          ['rememberMe', 'true'],
        ]);
      } else {
        await AsyncStorage.multiRemove(['savedEmail', 'rememberMe']);
      }

      const credentialsToSet = {
        ...user,
        email: user.email || email,
        token: accessToken,
        accessToken: accessToken,
      };

      await setCredentials(credentialsToSet);
      setErrorMessage('');

    } catch (error) {
      console.error('Login Error:', error);
      setErrorMessage(error.message || 'Failed to login. Please try again.');
      
      if (error.message?.includes('server')) {
        Alert.alert(
          'Login Failed',
          'Server error occurred. Please try again later.',
          [{ text: 'OK' }],
        );
      }
    } finally {
      setLoading(false);
    }
  }, [email, password, rememberMe, validateForm, setCredentials]);

  // ...rest of your component (return JSX)
  // Same as before, no changes needed to the UI part
});

export default Login;
